version: "3.9"

services:
  db:
    image: postgres:alpine3.17
    container_name: yt_db
    env_file:
      - .env
    volumes:
      - .:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT_DEV}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: on-failure
  db_test:
    image: postgres:alpine3.17
    container_name: db_test
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: on-failure
  redis:
    image: redis:latest
    container_name: redis_dev
    entrypoint: redis-server
    command: --requirepass ${REDIS_PASSWORD}
  bot:
    build:
      context: .
      dockerfile: docker/bot.Dockerfile
    container_name: dmkh_bot
    env_file:
      - .env
    environment:
      TOKEN: ${TOKEN_DEV}
      BACKEND: backend
      REDIS_HOST: redis_dev
    volumes:
      - ./bot:/app/bot
    depends_on:
      - redis
    restart: on-failure
    entrypoint: poetry run python3 -m bot
  backend:
    build:
      context: .
      dockerfile: docker/back.Dockerfile
    container_name: backend
    env_file:
      - .env
    environment:
      POSTGRES_HOST: yt_db
      TOKEN: ${TOKEN_DEV}
      REDIS_HOST: redis_dev
    volumes:
      - ./src:/app/src
    ports:
      - "9090:9090"
    depends_on:
      - db
      - redis
    entrypoint: poetry run python3 -m src
  celery:
    build:
      context: .
      dockerfile: docker/back.Dockerfile
    container_name: celery_dev
    env_file:
      - .env
    environment:
      POSTGRES_HOST: db_prod
      TOKEN: ${TOKEN_PROD}
      REDIS_HOST: redis_dev
    volumes:
      - ./src:/app/src
    depends_on:
      - backend
      - redis
    restart: on-failure
    entrypoint: celery --app=src.tasks.tasks:celery worker -l INFO
  # lab:
  #   build:
  #     context: .
  #     dockerfile: docker/lab.Dockerfile
  #   container_name: study_lab
  #   env_file:
  #     - .env
  #   environment:
  #     POSTGRES_HOST: yt_db
  #     TOKEN: ${TOKEN_DEV}
  #   ports:
  #     - "${LAB_PORT}:${LAB_PORT}"
  #   volumes:
  #     - ./data:/app/data
  #   entrypoint: jupyter lab --ip=0.0.0.0 --port=${LAB_PORT} --no-browser --allow-root